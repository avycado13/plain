#!/usr/bin/env python3

import os
import subprocess
from pathlib import Path

# ANSI escape codes for bold text
BOLD = '\033[1m'
END = '\033[0m'

def run_git_command(cmd, cwd):
    return subprocess.check_output(cmd, cwd=cwd, text=True, shell=True).strip()

def get_commits_since_version_change(repo_path, package_path):
    package_path = Path(package_path)
    pyproject_path = package_path / "pyproject.toml"
    rel_pyproject_path = pyproject_path.relative_to(repo_path)

    # Get all commits that modified the pyproject.toml file
    log_command = f'git log --format="%H" -- {rel_pyproject_path}'
    commits = run_git_command(log_command, repo_path).split('\n')

    last_version_commit = None
    current_version = None

    for commit in commits:
        # Get the content of pyproject.toml at this commit
        file_at_commit = run_git_command(f'git show {commit}:{rel_pyproject_path}', repo_path)

        # Extract the version (this is a simple implementation, might need adjustment)
        for line in file_at_commit.split('\n'):
            if line.strip().startswith('version'):
                version = line.split('=')[1].strip().strip('"')
                break
        else:
            version = None

        if version != current_version:
            last_version_commit = commit
            break

        current_version = version

    # If we didn't find a commit that changed the version, use the first commit
    if last_version_commit is None:
        last_version_commit = commits[-1] if commits else None

    if last_version_commit:
        # Get all commits since the last version change
        log_command = f'git log --format="%H %s" {last_version_commit}..HEAD -- {package_path.relative_to(repo_path)}'
        commits_since_version_change = run_git_command(log_command, repo_path).split('\n')
        return [commit.split(' ', 1) for commit in commits_since_version_change if commit]
    else:
        return []

def discover_packages(repo_path):
    return [d for d in os.listdir(repo_path) if os.path.isdir(d) and d.startswith('plain')]

def main():
    repo_path = os.getcwd()
    packages = discover_packages(repo_path)

    for package in packages:
        package_path = os.path.join(repo_path, package)
        commits = get_commits_since_version_change(repo_path, package_path)

        if commits:
            print(f"{BOLD}Commits for {package} since last version change:{END}")
            for commit_hash, commit_summary in commits:
                print(f"{commit_hash[:7]} - {commit_summary}")
            print()  # Add a blank line after each package with changes

if __name__ == "__main__":
    main()
