name: release
on:
  workflow_dispatch: {}
  push:
    branches:
      - main

jobs:
  release:
    if: ${{ contains(github.event.commit.message, 'Release') || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
    steps:
    - uses: actions/checkout@v3

    - run: pipx install poetry

    - uses: actions/setup-python@v4
      with:
        python-version: "3.12"
        cache: poetry

    # https://docs.pypi.org/trusted-publishers/using-a-publisher/
    - name: Mint API token
      id: mint-token
      run: |
        # retrieve the ambient OIDC token
        resp=$(curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
          "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=pypi")
        oidc_token=$(jq -r '.value' <<< "${resp}")

        # exchange the OIDC token for an API token
        resp=$(curl -X POST https://pypi.org/_/oidc/mint-token -d "{\"token\": \"${oidc_token}\"}")
        api_token=$(jq -r '.token' <<< "${resp}")

        # mask the newly minted API token, so that we don't accidentally leak it
        echo "::add-mask::${api_token}"

        # see the next step in the workflow for an example of using this step output
        echo "api-token=${api_token}" >> "${GITHUB_OUTPUT}"

    - name: Publish packages
      run: ./scripts/publish
      env:
        POETRY_PYPI_TOKEN_PYPI: ${{ steps.mint-token.outputs.api-token }}
